<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sugon.gsq.scs.dao.StreamStormTaskDAO">
  <resultMap id="BaseResultMap" type="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntity">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="belongUser" jdbcType="VARCHAR" property="belongUser" />
    <result column="jobName" jdbcType="VARCHAR" property="jobName" />
    <result column="workerNum" jdbcType="INTEGER" property="workerNum" />
    <result column="compareType" jdbcType="VARCHAR" property="compareType" />
    <result column="kafkaServer" jdbcType="VARCHAR" property="kafkaServer" />
    <result column="result" jdbcType="VARCHAR" property="result" />
    <result column="kafkaSource" jdbcType="VARCHAR" property="kafkaSource" />
    <result column="layout" jdbcType="VARCHAR" property="layout" />
    <result column="setting" jdbcType="VARCHAR" property="setting" />
    <result column="model" jdbcType="CHAR" property="model" />
    <result column="keys" jdbcType="VARCHAR" property="keys" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="updateDate" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, belongUser, jobName, workerNum, compareType, kafkaServer, `result`, kafkaSource, 
    layout, setting, model, `keys`, createDate, updateDate
  </sql>
  <select id="selectByExample" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from s_storm_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from s_storm_task
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from s_storm_task
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntityExample">
    delete from s_storm_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntity">
    insert into s_storm_task (id, belongUser, jobName, 
      workerNum, compareType, kafkaServer, 
      `result`, kafkaSource, layout, 
      setting, model, `keys`, 
      createDate, updateDate)
    values (#{id,jdbcType=VARCHAR}, #{belongUser,jdbcType=VARCHAR}, #{jobName,jdbcType=VARCHAR}, 
      #{workerNum,jdbcType=INTEGER}, #{compareType,jdbcType=VARCHAR}, #{kafkaServer,jdbcType=VARCHAR}, 
      #{result,jdbcType=VARCHAR}, #{kafkaSource,jdbcType=VARCHAR}, #{layout,jdbcType=VARCHAR}, 
      #{setting,jdbcType=VARCHAR}, #{model,jdbcType=CHAR}, #{keys,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntity">
    insert into s_storm_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="belongUser != null">
        belongUser,
      </if>
      <if test="jobName != null">
        jobName,
      </if>
      <if test="workerNum != null">
        workerNum,
      </if>
      <if test="compareType != null">
        compareType,
      </if>
      <if test="kafkaServer != null">
        kafkaServer,
      </if>
      <if test="result != null">
        `result`,
      </if>
      <if test="kafkaSource != null">
        kafkaSource,
      </if>
      <if test="layout != null">
        layout,
      </if>
      <if test="setting != null">
        setting,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="keys != null">
        `keys`,
      </if>
      <if test="createDate != null">
        createDate,
      </if>
      <if test="updateDate != null">
        updateDate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="belongUser != null">
        #{belongUser,jdbcType=VARCHAR},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="workerNum != null">
        #{workerNum,jdbcType=INTEGER},
      </if>
      <if test="compareType != null">
        #{compareType,jdbcType=VARCHAR},
      </if>
      <if test="kafkaServer != null">
        #{kafkaServer,jdbcType=VARCHAR},
      </if>
      <if test="result != null">
        #{result,jdbcType=VARCHAR},
      </if>
      <if test="kafkaSource != null">
        #{kafkaSource,jdbcType=VARCHAR},
      </if>
      <if test="layout != null">
        #{layout,jdbcType=VARCHAR},
      </if>
      <if test="setting != null">
        #{setting,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        #{model,jdbcType=CHAR},
      </if>
      <if test="keys != null">
        #{keys,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntityExample" resultType="java.lang.Long">
    select count(*) from s_storm_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update s_storm_task
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.belongUser != null">
        belongUser = #{record.belongUser,jdbcType=VARCHAR},
      </if>
      <if test="record.jobName != null">
        jobName = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.workerNum != null">
        workerNum = #{record.workerNum,jdbcType=INTEGER},
      </if>
      <if test="record.compareType != null">
        compareType = #{record.compareType,jdbcType=VARCHAR},
      </if>
      <if test="record.kafkaServer != null">
        kafkaServer = #{record.kafkaServer,jdbcType=VARCHAR},
      </if>
      <if test="record.result != null">
        `result` = #{record.result,jdbcType=VARCHAR},
      </if>
      <if test="record.kafkaSource != null">
        kafkaSource = #{record.kafkaSource,jdbcType=VARCHAR},
      </if>
      <if test="record.layout != null">
        layout = #{record.layout,jdbcType=VARCHAR},
      </if>
      <if test="record.setting != null">
        setting = #{record.setting,jdbcType=VARCHAR},
      </if>
      <if test="record.model != null">
        model = #{record.model,jdbcType=CHAR},
      </if>
      <if test="record.keys != null">
        `keys` = #{record.keys,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        createDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        updateDate = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update s_storm_task
    set id = #{record.id,jdbcType=VARCHAR},
      belongUser = #{record.belongUser,jdbcType=VARCHAR},
      jobName = #{record.jobName,jdbcType=VARCHAR},
      workerNum = #{record.workerNum,jdbcType=INTEGER},
      compareType = #{record.compareType,jdbcType=VARCHAR},
      kafkaServer = #{record.kafkaServer,jdbcType=VARCHAR},
      `result` = #{record.result,jdbcType=VARCHAR},
      kafkaSource = #{record.kafkaSource,jdbcType=VARCHAR},
      layout = #{record.layout,jdbcType=VARCHAR},
      setting = #{record.setting,jdbcType=VARCHAR},
      model = #{record.model,jdbcType=CHAR},
      `keys` = #{record.keys,jdbcType=VARCHAR},
      createDate = #{record.createDate,jdbcType=TIMESTAMP},
      updateDate = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntity">
    update s_storm_task
    <set>
      <if test="belongUser != null">
        belongUser = #{belongUser,jdbcType=VARCHAR},
      </if>
      <if test="jobName != null">
        jobName = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="workerNum != null">
        workerNum = #{workerNum,jdbcType=INTEGER},
      </if>
      <if test="compareType != null">
        compareType = #{compareType,jdbcType=VARCHAR},
      </if>
      <if test="kafkaServer != null">
        kafkaServer = #{kafkaServer,jdbcType=VARCHAR},
      </if>
      <if test="result != null">
        `result` = #{result,jdbcType=VARCHAR},
      </if>
      <if test="kafkaSource != null">
        kafkaSource = #{kafkaSource,jdbcType=VARCHAR},
      </if>
      <if test="layout != null">
        layout = #{layout,jdbcType=VARCHAR},
      </if>
      <if test="setting != null">
        setting = #{setting,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=CHAR},
      </if>
      <if test="keys != null">
        `keys` = #{keys,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        updateDate = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sugon.gsq.scs.entity.stream.StreamStormTaskEntity">
    update s_storm_task
    set belongUser = #{belongUser,jdbcType=VARCHAR},
      jobName = #{jobName,jdbcType=VARCHAR},
      workerNum = #{workerNum,jdbcType=INTEGER},
      compareType = #{compareType,jdbcType=VARCHAR},
      kafkaServer = #{kafkaServer,jdbcType=VARCHAR},
      `result` = #{result,jdbcType=VARCHAR},
      kafkaSource = #{kafkaSource,jdbcType=VARCHAR},
      layout = #{layout,jdbcType=VARCHAR},
      setting = #{setting,jdbcType=VARCHAR},
      model = #{model,jdbcType=CHAR},
      `keys` = #{keys,jdbcType=VARCHAR},
      createDate = #{createDate,jdbcType=TIMESTAMP},
      updateDate = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>